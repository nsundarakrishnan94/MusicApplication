{"ast":null,"code":"var _jsxFileName = \"/Users/sundarakrishnan/Desktop/MusicApplication/music-application/src/components/SpecificPlaylist.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport { AlbumContext, SongsContext } from '../App';\nimport AddIcon from '@material-ui/icons/Add';\nimport './AllSongs.css';\nimport CurrentPlaying from './CurrentPlaying';\nimport { CurrentSongDetails } from '../App';\nimport PlaylistModal from './PlaylistModal';\nimport './SpecificPlaylist.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nlet faker = require('faker');\n\nexport const CurrentSongTitle = /*#__PURE__*/React.createContext();\nexport const CurrentSongTime = /*#__PURE__*/React.createContext();\n\nconst randomTimeGenerator = () => {\n  const randomNumber = Math.random() * 10;\n  return randomNumber.toFixed(2);\n};\n\nfunction SpecificPlaylist() {\n  _s();\n\n  const [Playlists, setPlaylists] = useState([]);\n  const [isModalOpen, setisModalOpen] = useState(false);\n\n  const modalOpen = () => {\n    console.log('hiiii');\n    setisModalOpen(true);\n  };\n\n  const modalClose = () => {\n    setisModalOpen(false);\n  };\n\n  const albums = useContext(AlbumContext);\n  const songs = useContext(SongsContext);\n  const [searchSong, setSearchSong] = useState(\"\");\n  const [initialData, setInitialData] = useState(songs);\n  const [data, setData] = useState(songs); //const [playlistData,setPlaylistData]=useState({})\n\n  const playlistData = [];\n\n  const handleChange = value => {\n    setSearchSong(value);\n    filterData(value);\n  };\n\n  const filterData = value => {\n    const lowercasedValue = value.toLowerCase().trim();\n    if (lowercasedValue === \"\") setData(songs);else {\n      const filteredData = songs.filter(song => {\n        return song.title.toLowerCase().includes(lowercasedValue);\n      });\n      setData(filteredData);\n      console.log(data);\n      console.log(filteredData);\n    }\n  };\n\n  var randomName = faker.name.findName();\n  let TitleTrack = '';\n  let Duration = '';\n  let Img = '';\n  let Artist = '';\n  let Album = '';\n  let htmlSongs;\n  const searchbar = document.getElementById('searchbar');\n  const songsList = document.getElementsByClassName('SongsList')[0];\n  useEffect(() => {}, [playlistData]);\n\n  const addPlaylistSongHandler = e => {\n    e.stopPropagation();\n    const domelements = e.target;\n    console.log(domelements);\n    TitleTrack = domelements.querySelectorAll(\".TrackTitle\")[0].innerHTML.split('<span')[0];\n    Duration = domelements.querySelectorAll(\".DurationofSong\")[0].innerHTML;\n    Artist = domelements.querySelectorAll(\".Singer\")[0].innerHTML;\n    Album = domelements.querySelectorAll(\".AlbumName\")[0].innerHTML;\n    console.log(TitleTrack, Duration, Img, Artist, Album);\n    playlistData.push({\n      Title: TitleTrack,\n      Time: Duration,\n      Singer: Artist,\n      Album: Album\n    });\n    console.log('Sk');\n    console.log(playlistData.length);\n    console.log(playlistData);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"ActiveTitle\",\n      children: \"Playlist\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"SearchWrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"Playlistbtn\",\n        onClick: modalOpen,\n        children: \" Add Songs to Playlist\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"SongsWrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"TitleHeading\",\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          className: \"TrackTitleHeading\",\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          className: \"DurationHeading\",\n          children: \"Time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          className: \"SingerHeading\",\n          children: \"Artist\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          className: \"AlbumHeading\",\n          children: \"Album\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"SongsList\",\n        children: playlistData && playlistData.map(playlistsong => {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"PlaylistModalEachSongContainer\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"TrackTitle\",\n              children: [playlistsong.Title.charAt(0).toUpperCase() + playlistsong.Title.slice(1), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                class: \"tooltiptext\",\n                children: playlistsong.Title.charAt(0).toUpperCase() + playlistsong.Title.slice(1)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 123\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"DurationofSong\",\n              children: playlistsong.Time\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"Singer\",\n              children: playlistsong.Singer\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"AlbumName\",\n              children: playlistsong.Album\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 26\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(PlaylistModal, {\n      open: isModalOpen,\n      handleClose: modalClose,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"PlaylistSearchWrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"searchbar\",\n          id: \"playlistsearchbar\",\n          placeholder: \"Search for a song\",\n          value: searchSong,\n          onChange: e => handleChange(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"PlaylistModalSongsWrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"TitleHeading\",\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"PlaylistModalSongimg\",\n            children: \"Image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"PlaylistModalTrackTitleHeading\",\n            children: \"Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"PlaylistModalDurationHeading\",\n            children: \"Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"PlaylistModalSingerHeading\",\n            children: \"Artist\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"PlaylistModalAlbumHeading\",\n            children: \"Album\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"SongsList\",\n          children: data.map(song => {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"PlaylistModalEachSongContainer\",\n              onClick: addPlaylistSongHandler,\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"ImgContainer\",\n                onclick: \"event.stopPropagation()\",\n                children: [\" \", /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: song.thumbnailUrl,\n                  className: \"Img-thumbnail\",\n                  alt: \"thumbnail\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 188,\n                  columnNumber: 91\n                }, this), \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"TrackTitle\",\n                onclick: \"event.stopPropagation()\",\n                children: [song.title.charAt(0).toUpperCase() + song.title.slice(1), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  class: \"tooltiptext\",\n                  children: song.title.charAt(0).toUpperCase() + song.title.slice(1)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 189,\n                  columnNumber: 145\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 189,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"DurationofSong\",\n                onclick: \"event.stopPropagation()\",\n                children: randomTimeGenerator()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 190,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"Singer\",\n                onclick: \"event.stopPropagation()\",\n                children: faker.name.findName()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 191,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"AlbumName\",\n                onclick: \"event.stopPropagation()\",\n                children: albums && albums.map(album => album.id === song.albumId && album.title)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 30\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(SpecificPlaylist, \"tCdo4xuklGHQ9pnD7i4pVjo+848=\");\n\n_c = SpecificPlaylist;\nexport default SpecificPlaylist;\n\nvar _c;\n\n$RefreshReg$(_c, \"SpecificPlaylist\");","map":{"version":3,"sources":["/Users/sundarakrishnan/Desktop/MusicApplication/music-application/src/components/SpecificPlaylist.js"],"names":["React","useContext","useEffect","useState","AlbumContext","SongsContext","AddIcon","CurrentPlaying","CurrentSongDetails","PlaylistModal","faker","require","CurrentSongTitle","createContext","CurrentSongTime","randomTimeGenerator","randomNumber","Math","random","toFixed","SpecificPlaylist","Playlists","setPlaylists","isModalOpen","setisModalOpen","modalOpen","console","log","modalClose","albums","songs","searchSong","setSearchSong","initialData","setInitialData","data","setData","playlistData","handleChange","value","filterData","lowercasedValue","toLowerCase","trim","filteredData","filter","song","title","includes","randomName","name","findName","TitleTrack","Duration","Img","Artist","Album","htmlSongs","searchbar","document","getElementById","songsList","getElementsByClassName","addPlaylistSongHandler","e","stopPropagation","domelements","target","querySelectorAll","innerHTML","split","push","Title","Time","Singer","length","map","playlistsong","charAt","toUpperCase","slice","thumbnailUrl","album","id","albumId"],"mappings":"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","sourcesContent":["import React, {useContext,useEffect,useState} from 'react'\nimport {AlbumContext,SongsContext} from '../App'\nimport AddIcon from '@material-ui/icons/Add';\nimport './AllSongs.css'\nimport CurrentPlaying from './CurrentPlaying';\nimport {CurrentSongDetails} from '../App'\nimport PlaylistModal from './PlaylistModal'\nimport './SpecificPlaylist.css'\nlet faker = require('faker');\n\n\nexport const CurrentSongTitle=React.createContext()\nexport const CurrentSongTime=React.createContext()\n\nconst randomTimeGenerator=()=>{\n    const randomNumber=Math.random()*10;\n    return randomNumber.toFixed(2)\n}\n\nfunction SpecificPlaylist() {\n\n\n\n    const [Playlists, setPlaylists] = useState([])\n    const [isModalOpen,setisModalOpen]=useState(false);\n    \n\n    \n\n   \n  \n      const modalOpen = () => {\n        console.log('hiiii')\n        setisModalOpen(true) \n      }\n    \n   \n      const modalClose=() => {\n        setisModalOpen(false);\n      }\n\n   \n\n      \n \n\n\n\n\n\n\n\n\n    const albums=useContext(AlbumContext);\n    const songs=useContext(SongsContext);\n\n\n\n const [searchSong, setSearchSong] = useState(\"\");\n const [initialData, setInitialData] = useState(songs);\n  const [data, setData] = useState(songs);\n //const [playlistData,setPlaylistData]=useState({})\nconst playlistData=[];\n\n\n  const handleChange = value => {\n    setSearchSong(value);\n    filterData(value);\n  };\n  \n\n  \n\n  \n  \n  const filterData = (value) => {\n    const lowercasedValue = value.toLowerCase().trim();\n    if (lowercasedValue === \"\") setData(songs);\n    else {\n      const filteredData = songs.filter(song => {\n        return  song.title.toLowerCase().includes(lowercasedValue)\n        \n      });\n      setData(filteredData);\n      console.log(data);\n      console.log(filteredData);\n    }\n  }\n\n\n\n\n\n   \n    var randomName = faker.name.findName(); \n    let TitleTrack='';\n    let Duration='';\n    let Img='';\n    let Artist='';\n    let Album='';\n    let htmlSongs;\n    const searchbar=document.getElementById('searchbar');\n    const songsList=document.getElementsByClassName('SongsList')[0];\n\n  useEffect(() => {\n     \n  }, [playlistData])\n\n\n    const addPlaylistSongHandler=(e) =>{\n        e.stopPropagation();\n        const domelements = e.target\n        console.log(domelements);\n         TitleTrack= domelements.querySelectorAll(\".TrackTitle\")[0].innerHTML.split('<span')[0];\n         Duration= domelements.querySelectorAll(\".DurationofSong\")[0].innerHTML;  \n         Artist= domelements.querySelectorAll(\".Singer\")[0].innerHTML;\n         Album= domelements.querySelectorAll(\".AlbumName\")[0].innerHTML;   \n         console.log(TitleTrack,Duration,Img,Artist,Album) ;\n         playlistData.push({\n             Title:TitleTrack,\n             Time:Duration,\n             Singer:Artist,\n             Album:Album\n         });\n\n         console.log('Sk');\n         console.log(playlistData.length)\n         console.log(playlistData)\n       \n      }\n\n\n\n  \n    return (\n        <>\n        <p className='ActiveTitle'>Playlist</p>\n        <div className='SearchWrapper'>\n        <button className='Playlistbtn' onClick={modalOpen}> Add Songs to Playlist</button>\n        </div>\n\n        <ul className='SongsWrapper'>\n\n            <li className='TitleHeading'>\n                <th className='TrackTitleHeading'>Title</th>\n                <th className='DurationHeading'>Time</th>\n                <th className='SingerHeading'>Artist</th>\n                <th className='AlbumHeading'>Album</th>\n            </li>\n            <ul className='SongsList'>\n            {\n                playlistData && playlistData.map(playlistsong=>{\n                return   <li className='PlaylistModalEachSongContainer'>\n                    {/* <span className='ImgContainer'> <img src={song.thumbnailUrl} className='Img-thumbnail' alt='thumbnail'/> </span>*/}\n                    <p className='TrackTitle' >{playlistsong.Title.charAt(0).toUpperCase() + playlistsong.Title.slice(1)} <span class=\"tooltiptext\">{playlistsong.Title.charAt(0).toUpperCase() + playlistsong.Title.slice(1)}</span></p>\n                <p className='DurationofSong'>{playlistsong.Time}</p>  \n                <p className='Singer'>{playlistsong.Singer}</p>   \n                <p className='AlbumName'>{ playlistsong.Album}</p>   \n               \n                </li>\n                \n                })\n            }\n            </ul>\n\n\n        </ul>\n        <PlaylistModal open={isModalOpen} handleClose={modalClose}>\n\n             <div className='PlaylistSearchWrapper'>\n                <input type='text' name='searchbar' id='playlistsearchbar' placeholder='Search for a song' value={searchSong}\n                onChange={e => handleChange(e.target.value)} />\n            </div>\n            <ul className='PlaylistModalSongsWrapper'>\n\n            <li className='TitleHeading'>\n                <th className='PlaylistModalSongimg'>Image</th>\n                <th className='PlaylistModalTrackTitleHeading'>Title</th>\n                <th className='PlaylistModalDurationHeading'>Time</th>\n                <th className='PlaylistModalSingerHeading'>Artist</th>\n                <th className='PlaylistModalAlbumHeading'>Album</th>\n            </li>\n            \n                <ul className='SongsList'>\n                {\n                    data.map(song=>{\n                    return   <li className='PlaylistModalEachSongContainer' onClick={addPlaylistSongHandler}>\n                        <span className='ImgContainer' onclick=\"event.stopPropagation()\"> <img src={song.thumbnailUrl} className='Img-thumbnail' alt='thumbnail'/> </span>\n                        <p className='TrackTitle' onclick=\"event.stopPropagation()\" >{song.title.charAt(0).toUpperCase() + song.title.slice(1)} <span class=\"tooltiptext\">{song.title.charAt(0).toUpperCase() + song.title.slice(1)}</span></p>\n                    <p className='DurationofSong' onclick=\"event.stopPropagation()\" >{randomTimeGenerator()}</p>  \n                    <p className='Singer' onclick=\"event.stopPropagation()\">{faker.name.findName()}</p>   \n                    <p className='AlbumName' onclick=\"event.stopPropagation()\">{ albums && albums.map(album =>(\n                        (album.id===song.albumId) && album.title \n                    )) }</p>   \n                   \n                    </li>\n                    \n                    })\n                }\n                </ul>\n\n            </ul>\n       \n        </PlaylistModal>\n\n\n\n\n\n\n\n\n\n        \n        </>\n    )\n}\n\n\nexport default SpecificPlaylist\n"]},"metadata":{},"sourceType":"module"}